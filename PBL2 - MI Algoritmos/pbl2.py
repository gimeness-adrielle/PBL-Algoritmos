import numpy as np
import random
import time
import curses

# Autor: Adrielle Gimenes
# Componente Curricular: MI Algoritmos
# Conclu√≠do em: 26/10/2024
# Declaro que este c√≥digo foi elaborado por mim de forma individual e n√£o cont√©m nenhum
# trecho de c√≥digo de outro colega ou de outro autor, tais como provindos de livros e
# apostilas, e p√°ginas ou documentos eletr√¥nicos da Internet. Qualquer trecho de c√≥digo
# de outra autoria que n√£o a minha est√° destacado com uma cita√ß√£o para o autor e a fonte
# do c√≥digo, e estou ciente que estes trechos n√£o ser√£o considerados para fins¬†de¬†avalia√ß√£o.

# Fun√ß√£o principal do jogo
def main (stdscr):
    global tabuleiro, linhas, colunas, pos_y, pos_x, pontua√ßao, score, display_pe√ßa, prox_pe√ßa, pe√ßa
    curses.curs_set(0)
    tela_inicial (stdscr)
    stdscr.nodelay(1)
    stdscr.timeout(10)
    pontua√ßao = 0

    # Cria√ß√£o do tabuleiro
    tabuleiro = np.zeros((20,10))

    # Display Score
    score = curses.newwin(5, 15, 1, 22)
    display_score()

    # Display da pr√≥xima pe√ßa
    display_pe√ßa = curses.newwin(6, 10, 6, 24) 
    display_pe√ßa.box()

    # Defini√ß√£o de cores para cada pe√ßa
    curses.init_pair(1, curses.COLOR_CYAN, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_WHITE, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_MAGENTA, curses.COLOR_BLACK)
    curses.init_pair(4, curses.COLOR_YELLOW, curses.COLOR_BLACK)
    curses.init_pair(5, curses.COLOR_GREEN, curses.COLOR_BLACK)
    curses.init_pair(6, curses.COLOR_BLUE, curses.COLOR_BLACK)
    curses.init_pair(7, curses.COLOR_RED, curses.COLOR_BLACK)

    # Coloca a primeira pe√ßa
    prox_pe√ßa = np.rot90 (random.choice(pe√ßas),random.randint(0,3))
    gerar_pe√ßa ()
    tempo_inicial = time.time()
    delay = 0.5

    # Loop do jogo para descer as pe√ßas
    while (1):  
        tempo_atual = time.time()
        if tempo_atual - tempo_inicial >= delay:
            limpar_desenhar_pe√ßa (0) # Limpa a pe√ßa para mover
            if colisao(linhas, colunas, pos_y + 1, pos_x):
                pos_y += 1
                limpar_desenhar_pe√ßa (pe√ßa) # Desenha a pe√ßa
            else:
                limpar_desenhar_pe√ßa (pe√ßa)
                if pe√ßa[0,0] == 8: # Se for a pe√ßa bomba
                    bomba(tabuleiro, pos_y, pos_x)
                limpar_linhas ()
                gerar_pe√ßa ()
                if not colisao(linhas, colunas, pos_y, pos_x):
                    game_over (stdscr)
                    break
            tempo_inicial = tempo_atual

        # Captura de teclas
        tecla = stdscr.getch ()
        if tecla != -1:
            limpar_desenhar_pe√ßa (0)
            # Mover para esquerda
            if tecla == curses.KEY_LEFT and colisao (linhas, colunas, pos_y, pos_x - 1):
                pos_x -= 1

            # Mover para direita
            elif tecla == curses.KEY_RIGHT and colisao (linhas, colunas, pos_y, pos_x + 1):
                pos_x += 1

            # Mover para baixo
            elif tecla == curses.KEY_DOWN and colisao (linhas, colunas, pos_y + 1, pos_x):
                pos_y += 1

            # Rotacionar pe√ßa
            elif tecla == curses.KEY_UP:
                pe√ßa_rot = np.rot90(pe√ßa) # Cria uma nova pe√ßa rotacionada
                linhas_rot, colunas_rot = pe√ßa_rot.shape
                if colisao(linhas_rot, colunas_rot, pos_y, pos_x): # Verifica se a pe√ßa rotacionada cabe no tabuleiro
                    pe√ßa = pe√ßa_rot
                    linhas, colunas = linhas_rot, colunas_rot
            limpar_desenhar_pe√ßa (pe√ßa)

        print_tabuleiro (stdscr)
        display_score()
        proxima_pe√ßa (prox_pe√ßa)

# Definir situa√ß√µes de colis√£o com tabuleiro e com pe√ßas
def colisao(linhas, colunas, pos_y, pos_x):
    if pos_y < 0 or pos_x < 0 or pos_y + linhas > tabuleiro.shape[0] or pos_x + colunas > tabuleiro.shape[1]:
        return False
    # Colis√£o com outras pe√ßas
    limite = tabuleiro[pos_y:pos_y + linhas, pos_x:pos_x + colunas]
    if pe√ßa.shape == limite.shape:
        if np.any(np.logical_and(pe√ßa != 0, limite != 0)):
            return False
        else:
            return True
    return True

# Fun√ß√£o de colocar uma nova pe√ßa ao tabuleiro
def gerar_pe√ßa():
    global prox_pe√ßa, linhas, colunas, pos_y, pos_x, pe√ßa
    pe√ßa = prox_pe√ßa
    linhas, colunas = pe√ßa.shape
    pos_y, pos_x = 0, random.randint(0, tabuleiro.shape[1] - colunas)
    # Armazenar a pr√≥xima pe√ßa para display
    prox_pe√ßa = np.rot90(random.choice(pe√ßas), random.randint(0, 3))

# Fun√ß√£o para limpar as pe√ßas ou desenhar e fixar a pe√ßa, dependendo do par√¢metro
def limpar_desenhar_pe√ßa (valor):
    tabuleiro[pos_y:pos_y + linhas, pos_x:pos_x + colunas] = np.where(pe√ßa != 0, valor, tabuleiro[pos_y:pos_y + linhas, pos_x:pos_x + colunas])

# Fun√ß√£o para limpar as linhas completas e adicionar pontua√ß√£o
def limpar_linhas():
    global tabuleiro, pontua√ßao
    linhas_removidas = 0  # Contador
    linhas_tab = tabuleiro.shape[0] - 1
    while linhas_tab >= 0: # Percorre as linhas do tabuleiro de baixo para cima
        if np.all(tabuleiro[linhas_tab, :] != 0):
            tabuleiro = np.delete(tabuleiro, linhas_tab, axis=0) # Deleta uma linha totalmente preenchida
            tabuleiro = np.vstack((np.zeros((1,10)), tabuleiro)) # Adiciona uma nova linha ao topo do tabuleiro
            linhas_removidas += 1
        else: # Caso a linha atual n√£o esteja totalmente preenchida, verifica a proxima
            linhas_tab -= 1
    # Adicionar pontua√ß√£o
    if linhas_removidas > 0:
        base_pontuacao = 100
        bonus = 1 if linhas_removidas == 1 else 2 if linhas_removidas <= 4 else 3
        pontua√ßao += base_pontuacao * linhas_removidas * bonus

# Fun√ß√£o para a pe√ßa bomba
def bomba (tabuleiro, pos_y, pos_x): 
    for i in range(-1, 2):
        for j in range(-1, 2):
            if 0 <= pos_y + i < tabuleiro.shape[0] and 0 <= pos_x + j < tabuleiro.shape[1]:
                tabuleiro[pos_y + i, pos_x + j] = 0

# Fun√ß√£o de imprimir o tabuleiro e as pe√ßas de acordo com sua devida cor
def print_tabuleiro(stdscr):
    stdscr.clear()
    # Definir os limites
    lin, col = tabuleiro.shape[0], tabuleiro.shape[1]
    for y in range(lin): # Percorre as linhas do tabuleiro
        for x in range(col): # Percorre as colunas do tabuleiro
            elemento = tabuleiro[y, x] # Percorre cada coordenada do tabuleiro, para desenhar em cada uma
            # Definir o s√≠mbolo e a cor com base no elemento
            if elemento == 0: celula, cor = '‚ñ¢', curses.A_NORMAL
            elif elemento == 8: celula, cor = 'üí£', curses.A_NORMAL
            else: celula, cor = '‚ñ†', curses.color_pair(int(elemento))
            # Desenhar a pe√ßa (*2 √© apenas para ter um espa√ßamento entre as c√©lulas)
            stdscr.addstr(y, x * 2, celula, cor)
    stdscr.refresh()

# Display score
def display_score():
    global score, pontua√ßao
    score.clear()
    score.attrset(curses.color_pair(6))
    score.box()
    score.attrset(curses.color_pair(0))
    score.addstr(1, 5, "SCORE", curses.A_BOLD)
    score.addstr(2, 6, str(pontua√ßao))
    score.refresh()

# Display pr√≥xima pe√ßa
def proxima_pe√ßa(prox_pe√ßa):
    display_pe√ßa.clear()
    display_pe√ßa.attrset(curses.color_pair(6))
    display_pe√ßa.box()
    display_pe√ßa.attrset(curses.color_pair(0))

    lin, col = prox_pe√ßa.shape[0], prox_pe√ßa.shape[1]
    for y in range(lin):
        for x in range(col):
            elemento = prox_pe√ßa[y, x]
            if elemento == 0: continue
            elif elemento == 8: celula, cor = 'üí£', curses.A_NORMAL
            else: celula, cor = '‚ñ†', curses.color_pair(int(elemento))
            display_pe√ßa.addstr(y + 1, x + 4, celula, cor)
    display_pe√ßa.refresh()

# Display da tela inicial
def tela_inicial (stdscr):
    stdscr.addstr (10,20,"‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó")
    stdscr.addstr (11,20,"‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù")
    stdscr.addstr (12,20,"   ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ")
    stdscr.addstr (13,20,"   ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù      ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë  ‚ïö‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó")
    stdscr.addstr (14,20,"   ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù")
    stdscr.addstr (15,20,"   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ")
    stdscr.refresh ()
    time.sleep (3)
    stdscr.addstr (17,38,"PRESS 'ANY KEY'")
    stdscr.refresh ()
    stdscr.getch ()
    stdscr.clear()

# Mostrar GAME OVER
def game_over (stdscr):
    stdscr.clear ()
    stdscr.addstr (12,20,"‚ñà‚ñÄ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÄ   ‚ñà‚ñÄ‚ñà ‚ñà‚ñë‚ñà ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñà ", curses.color_pair(7))
    stdscr.addstr (13,20,"‚ñà‚ñÑ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñë‚ñÄ‚ñë‚ñà ‚ñà‚ñà‚ñÑ   ‚ñà‚ñÑ‚ñà ‚ñÄ‚ñÑ‚ñÄ ‚ñà‚ñà‚ñÑ ‚ñà‚ñÄ‚ñÑ ", curses.color_pair(7))
    stdscr.refresh ()
    time.sleep (3)
    
# Definindo cada pe√ßa
pe√ßas = [np.array([[1, 1, 1, 1]]), np.array([[2, 2], [2, 2]]),  np.array([[3, 3, 3], [0, 3, 0]]), 
         np.array([[0, 4, 4], [4, 4, 0]]), np.array([[5, 5, 0], [0, 5, 5]]), np.array([[6, 0, 0], [6, 6, 6]]),
        np.array([[0, 0, 7], [7, 7, 7]]), np.array([[8]])]

stdscr = curses.initscr()
curses.wrapper(main)